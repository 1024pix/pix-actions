name: Docker generic Build 

on:
  workflow_call:
    inputs:
      images:
        description: 'JSON array of images to build'
        required: true
        type: string
      runs-on:
        description: 'Runner to use for the job'
        required: false
        type: string
        default: 'ubuntu-latest'
    secrets:
      REGISTRY_ENDPOINT:
        required: false
      REGISTRY_USERNAME:
        required: false
      REGISTRY_TOKEN:
        required: false
      CONTAINER_REGISTRY_SCW_INFRA_ENDPOINT:
        required: false
      SCW_CONTAINER_REGISTRY_INFRA_SECRET_KEY:
        required: false
        

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(inputs.images) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_ENDPOINT || secrets.CONTAINER_REGISTRY_SCW_INFRA_ENDPOINT }}
          username: ${{ secrets.REGISTRY_USERNAME || 'nologin' }}
          password: ${{ secrets.REGISTRY_TOKEN || secrets.SCW_CONTAINER_REGISTRY_INFRA_SECRET_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY_ENDPOINT || secrets.CONTAINER_REGISTRY_SCW_INFRA_ENDPOINT }}/${{ matrix.image.name }}
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}-${{ github.run_number }},enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=rc-{{date 'YYYY.MM.DD'}}-${{ github.run_number }},enable={{is_default_branch}}
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ matrix.image.build-args && join(matrix.image.build-args, '\n') || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Build summary
        run: |
          echo "## 🐳 ${{ matrix.image.name }} built successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
